require("dotenv").config()

const { Telegraf, session, Scenes: {WizardScene, Stage} } = require('telegraf')
const bot = new Telegraf(process.env.BOT_TOKEN)

const utils = require("./utils")
const sequelize = require("./models/db_conf")
const models = require("./models/model")
const replyKeyboard = require("./keyboards/replyKeyboard")
const { stage } = require("./scenes");
const { action } = require("./scenes/mailingScene")

bot.use(session())
bot.use(stage.middleware());

bot.start( async ctx => {
    await ctx.scene.leave()

    let res = await models.Customer.findOne({where: {user_id: ctx.message.from.id}})
    if(res === null) {
        await models.Customer.create({
            user_id: ctx.message.from.id
        })
    }
    await ctx.reply("‚Ñπ–û—Ç–ª–∏—á–Ω–æ! –û—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ? üòÉ", await replyKeyboard.mainMenu())
    await ctx.scene.enter("choosing_food_scene")
})

bot.command("start", async ctx => {
    await ctx.scene.leave()
    let res = await models.Customer.findOne({where: {user_id: ctx.message.from.id}})
    if(res === null) {
        await models.Customer.create({
            user_id: ctx.message.from.id
        })
    }
   
    await ctx.reply("‚Ñπ–û—Ç–ª–∏—á–Ω–æ! –û—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ? üòÉ", await replyKeyboard.mainMenu())
    await ctx.scene.enter("choosing_food_scene")
})

bot.command("admin", async ctx => {
    const isAdmin = await utils.userIsAdmin(ctx.message.from.id)
    if(isAdmin == true) {
        await ctx.scene.leave()
        await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: ", await replyKeyboard.adminPanel())
    }
})


bot.on("photo", async ctx => {
    console.log(ctx.message.photo)
})

bot.on('pre_checkout_query', async (ctx) => {
    await ctx.answerPreCheckoutQuery(true)
})


bot.on("message", async ctx => {
    const userTxt = ctx.message.text
    const userId = ctx.message.from.id
    if(ctx.message.chat.id == process.env.GROUP_ID) {
        if(ctx.message.reply_to_message) {
            const replyText = ctx.message.reply_to_message.text
            const deliveryPrice = ctx.message.text.replace(" ", "")
            if(!isNaN(deliveryPrice)) {
                let orderReg = /–ó–∞–∫–∞–∑ ‚Ññ\d{1,6}/
                let paymentTypeReg = /–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üíµ –ù–∞–ª–∏—á–Ω—ã–µ|üí≥ Payme/
                let orderMatch = replyText.match(orderReg)
                let paymentTypeMatch = replyText.match(paymentTypeReg)
                const paymentType = paymentTypeMatch
                const orderId = parseInt(orderMatch[0].split("‚Ññ")[1])
                if(orderId) {
                    const providerToken = process.env.PAYME_TOKEN
                    const order = await utils.getOrderInfo(orderId)
                    let cart = await utils.getCartInfo2(order.customerUserId, orderId)
                    let cartDishes = cart.cart_dishes
                    let totalPrice = 0
                    cartDishes.forEach(dish => {
                        let price = dish.amount * dish.dish.price 
                        totalPrice += price
                    })
                    totalPrice += parseInt(deliveryPrice)
                    if(order.price_delivery == 0 || order.price_delivery === null) {
                        if(paymentType == "üí≥ Payme") {
                            let invoice = {
                                chat_id: order.customerUserId, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                                provider_token: providerToken, // —Ç–æ–∫–µ–Ω –≤—ã–¥–∞–Ω–Ω—ã–π —á–µ—Ä–µ–∑ –±–æ—Ç @SberbankPaymentBot 
                                start_parameter: 'get_access', //–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≥–ª—É–±–∏–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫. –ï—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ –ø—É—Å—Ç—ã–º, –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ø–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∏–º–µ—Ç—å –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, –ø–æ–∑–≤–æ–ª—è—é—â—É—é –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∏–∑ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Å—á–µ—Ç. –ï—Å–ª–∏ –Ω–µ –ø—É—Å—Ç–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ø–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∏–º–µ—Ç—å –∫–Ω–æ–ø–∫—É URL —Å –≥–ª—É–±–æ–∫–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞ (–≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã) —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
                                title: `–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: Payme`, // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, 1-32 —Å–∏–º–≤–æ–ª–∞
                                description: `–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${totalPrice} —Å—É–º.\n–ß—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É`, // –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, 1-255 –∑–Ω–∞–∫–æ–≤
                                currency: 'UZS', // –¢—Ä–µ—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã ISO 4217
                                prices: [{ label: 'Invoice Title', amount: parseInt(totalPrice) * 100}], // –†–∞–∑–±–∏–≤–∫–∞ —Ü–µ–Ω, —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON 100 –∫–æ–ø–µ–µ–∫ * 100 = 100 —Ä—É–±–ª–µ–π
                                payload: { // –ü–æ–ª–µ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º, 1‚Äì128 –±–∞–π—Ç. –≠—Ç–æ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è —Å–≤–æ–∏—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
                                    unique_id: `${ctx.message.from.id}_${order.id}`,
                                    provider_token: providerToken
                                }
                            }
                            context = await replyKeyboard.pay()
                            context.parse_mode = "HTML"
                            await ctx.telegram.sendMessage(order.customerUserId, `–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: <b>Payme</b>\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${totalPrice} —Å—É–º.(–≤–∫–ª—é—á–∞—è –¥–æ—Å—Ç–∞–≤–∫—É ${deliveryPrice} —Å—É–º.) \n–ß—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å\"`, context)
                            await ctx.telegram.sendInvoice(order.customerUserId, invoice)
                        } else {
                            await ctx.telegram.sendMessage(order.customerUserId, `–ó–∞–∫–∞–∑ –≤—ã–µ—Ö–∞–ª –∫ –≤–∞–º. –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç 50–º–∏–Ω. –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ - <b>${deliveryPrice} —Å—É–º.</b>`, {parse_mode: "HTML"})
                        }
                    }
                    await utils.updateDelivery(orderId, deliveryPrice)
                }
            } else {
                await ctx.telegram.sendMessage(process.env.GROUP_ID, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            }
        }
    } else {
        const isAdmin = await utils.userIsAdmin(userId)
        if(isAdmin == true) {
            if(userTxt == "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç") {
                await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
                await ctx.scene.enter("choose_dish_by_name")
            } else if(userTxt == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç") {
                const catObj = await utils.getCategoryByBranch("–ú–µ–Ω—é")
                await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞", await replyKeyboard.createOnlyCategoryButtons(catObj.categories))
                await ctx.scene.enter("create_dish_scene")
            } else if(userTxt == "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é") {
                const catObj = await utils.getCategoryByBranch("–ú–µ–Ω—é")
                await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", await replyKeyboard.createOnlyCategoryButtons(catObj.categories))
                await ctx.scene.enter("delete_category_scene")
            } else if(userTxt == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é") {
                await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", await replyKeyboard.cancel())
                await ctx.scene.enter("create_category_scene")
            } else if(userTxt == "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É") {
                await ctx.reply("–ö–∞–∫–æ–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å?", await replyKeyboard.mailing())
                await ctx.scene.enter("mailing_scene")
            } else if(userTxt == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤") {
                const userIds = await utils.getUserIds()
                const clientNumbers = userIds.length
                await ctx.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ - " + clientNumbers)
            } else {
                await ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", await replyKeyboard.mainMenu())
                await ctx.scene.enter("choosing_food_scene")
            }
        }
    }
})


// bot.on('message', async (ctx) => {
//     if (ctx.update.message.successful_payment != undefined) {
//         await ctx.reply('Thanks for the purchase!')
//         await ctx.reply(JSON.stringify(ctx.update.message))
//     } else {
//         // Handle other message types, subtypes
//     }
// })
// bot.on("callback_query", async ctx => {
//     console.log(ctx.update.callback_query.data)
// })

bot.action(/^confirm:/, async ctx => {
    const data = await ctx.callbackQuery.data.split(":")[1].split("_")
    const messageId = await ctx.callbackQuery.message.message_id
    const orderId = parseInt(data[0])
    const userId = parseInt(data[1])
    await ctx.telegram.sendMessage(userId,`–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ${orderId} –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n–°–µ–π—á–∞—Å –í–∞–º –ø–æ–∑–≤–æ–Ω–∏—Ç –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä.`, await replyKeyboard.mainMenu())
    await ctx.editMessageReplyMarkup(await replyKeyboard.removeKeyboard())
    await ctx.reply(`–ó–∞–∫–∞–∑ ‚Ññ${orderId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º @${ctx.callbackQuery.from.username}`)
})

bot.action(/^decline:/, async ctx => {
    const data = await ctx.callbackQuery.data.split(":")[1].split("_")
    const messageId = await ctx.callbackQuery.message.message_id
    const orderId = parseInt(data[0])
    const userId = parseInt(data[1])
    await ctx.telegram.sendMessage(userId, `<b>–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ${orderId} –æ—Ç–º–µ–Ω—ë–Ω!</b>`, {parse_mode: "HTML"})
    await ctx.editMessageReplyMarkup(await replyKeyboard.removeKeyboard())
    await ctx.reply(`–ó–∞–∫–∞–∑ ‚Ññ${orderId} –æ—Ç–º–µ–Ω—ë–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º @${ctx.callbackQuery.from.username}`)
})

bot.action(/^product:/, async ctx => {
    const data = await ctx.callbackQuery.data.split(":")
    const productId = data[1]
    const categoryId = data[2]
    const dishInfo = await models.Dish.findOne({where: {id: productId, categoryId: categoryId}})
    await ctx.replyWithPhoto(dishInfo.file_id, {caption: `${dishInfo.title}\n\n${dishInfo.description}\n\n–¶–µ–Ω–∞: <b>${dishInfo.price} —Å—É–º</b>`, parse_mode: "HTML"})

})

bot.action("phone", async ctx => {
    await ctx.reply("–ù–∞—à–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:\n+998946160016\n+998977654568")
})


async function start() {
    bot.telegram.getMe().then( async bot_info => {
        let currTime = new Date();
        console.log(`BOT SUCCESSFULY STARTED ${await utils.currTime()} `+ bot_info.first_name)
    })
    try {
        await sequelize.authenticate()
        await sequelize.sync()
    } catch(e) {
        console.log(e)
    }
}

start()
bot.launch()


process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))