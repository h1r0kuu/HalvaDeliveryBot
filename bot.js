require("dotenv").config()

const { Telegraf, session, Scenes: {WizardScene, Stage} } = require('telegraf')
const bot = new Telegraf(process.env.BOT_TOKEN)

const utils = require("./utils")
const sequelize = require("./models/db_conf")
const models = require("./models/model")
const replyKeyboard = require("./keyboards/replyKeyboard")
const { stage } = require("./scenes");
const { action } = require("./scenes/mailingScene")

bot.use(session())
bot.use(stage.middleware());

bot.start( async ctx => {
    await ctx.scene.leave()

    let res = await models.Customer.findOne({where: {user_id: ctx.message.from.id}})
    if(res === null) {
        await models.Customer.create({
            user_id: ctx.message.from.id
        })
    }
    await ctx.reply("‚Ñπ–û—Ç–ª–∏—á–Ω–æ! –û—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ? üòÉ", await replyKeyboard.mainMenu())
    await ctx.scene.enter("choosing_food_scene")
})

bot.command("start", async ctx => {
    await ctx.scene.leave()
    let res = await models.Customer.findOne({where: {user_id: ctx.message.from.id}})
    if(res === null) {
        await models.Customer.create({
            user_id: ctx.message.from.id
        })
    }
    await ctx.reply("‚Ñπ–û—Ç–ª–∏—á–Ω–æ! –û—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ? üòÉ", await replyKeyboard.mainMenu())
    await ctx.scene.enter("choosing_food_scene")
})

bot.command("admin", async ctx => {
    const isAdmin = await utils.userIsAdmin(ctx.message.from.id)
    if(isAdmin == true) {
        await ctx.scene.leave()
        await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: ", await replyKeyboard.adminPanel())
    }
})


bot.on("photo", async ctx => {
    console.log(ctx.message.photo)
})

bot.on('pre_checkout_query', async (ctx) => {
    await ctx.answerPreCheckoutQuery(true)
})


bot.on("message", async ctx => {
    const userTxt = ctx.message.text
    const userId = ctx.message.from.id
    const isAdmin = await utils.userIsAdmin(userId)
    if(isAdmin == true) {
        if(userTxt == "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç") {
            await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
            await ctx.scene.enter("choose_dish_by_name")
        } else if(userTxt == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç") {
            const catObj = await utils.getCategoryByBranch("–ú–µ–Ω—é")
            await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞", await replyKeyboard.createOnlyCategoryButtons(catObj.categories))
            await ctx.scene.enter("create_dish_scene")
        } else if(userTxt == "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é") {
            const catObj = await utils.getCategoryByBranch("–ú–µ–Ω—é")
            await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", await replyKeyboard.createOnlyCategoryButtons(catObj.categories))
            await ctx.scene.enter("delete_category_scene")
        } else if(userTxt == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é") {
            await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", await replyKeyboard.cancel())
            await ctx.scene.enter("create_category_scene")
        } else if(userTxt == "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É") {
            await ctx.reply("–ö–∞–∫–æ–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å?", await replyKeyboard.mailing())
            await ctx.scene.enter("mailing_scene")
        } else {
            await ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", await replyKeyboard.mainMenu())
            await ctx.scene.enter("choosing_food_scene")
        }
    }
})


// bot.on('message', async (ctx) => {
//     if (ctx.update.message.successful_payment != undefined) {
//         await ctx.reply('Thanks for the purchase!')
//         await ctx.reply(JSON.stringify(ctx.update.message))
//     } else {
//         // Handle other message types, subtypes
//     }
// })
// bot.on("callback_query", async ctx => {
//     console.log(ctx.update.callback_query.data)
// })

bot.action(/^confirm:/, async ctx => {
    const data = await ctx.callbackQuery.data.split(":")[1].split("_")
    const messageId = await ctx.callbackQuery.message.message_id
    const orderId = parseInt(data[0])
    const userId = parseInt(data[1])
    await ctx.telegram.sendMessage(userId, `<b>–ú—ã –Ω–∞—á–∞–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å –í–∞—à –∑–∞–∫–∞–∑.\n–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç 50 –º–∏–Ω—É—Ç.–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞–∫–∞–∑!üòä</b>`, {parse_mode: "HTML"})
    await ctx.editMessageReplyMarkup(await replyKeyboard.removeKeyboard())
    await ctx.reply(`–ó–∞–∫–∞–∑ ‚Ññ${orderId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º @${ctx.callbackQuery.from.username}`)
})

bot.action(/^decline:/, async ctx => {
    const data = await ctx.callbackQuery.data.split(":")[1].split("_")
    const messageId = await ctx.callbackQuery.message.message_id
    const orderId = parseInt(data[0])
    const userId = parseInt(data[1])
    await ctx.telegram.sendMessage(userId, `<b>–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ${orderId} –æ—Ç–º–µ–Ω—ë–Ω!</b>`, {parse_mode: "HTML"})
    await ctx.editMessageReplyMarkup(await replyKeyboard.removeKeyboard())
    await ctx.reply(`–ó–∞–∫–∞–∑ ‚Ññ${orderId} –æ—Ç–º–µ–Ω—ë–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º @${ctx.callbackQuery.from.username}`)
})

bot.action(/^product:/, async ctx => {
    const data = await ctx.callbackQuery.data.split(":")
    const productId = data[1]
    const categoryId = data[2]
    const dishInfo = await models.Dish.findOne({where: {id: productId, categoryId: categoryId}})
    await ctx.replyWithPhoto(dishInfo.file_id, {caption: `${dishInfo.title}\n\n${dishInfo.description}\n\n–¶–µ–Ω–∞: <b>${dishInfo.price} —Å—É–º</b>`, parse_mode: "HTML"})

})

bot.action("phone", async ctx => {
    await ctx.reply("–ù–∞—à–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:\n+998946160016\n+998977654568")
})


async function start() {
    bot.telegram.getMe().then( async bot_info => {
        let currTime = new Date();
        console.log(`BOT SUCCESSFULY STAR–≤–≤–≤TED ${await utils.currTime()} `+ bot_info.first_name)
    })
    try {
        await sequelize.authenticate()
        await sequelize.sync()
    } catch(e) {
        console.log(e)
    }
}

start()
bot.launch()


process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))