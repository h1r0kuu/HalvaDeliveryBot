const { Keyboard, Key } = require('telegram-keyboard')
const utils = require("../utils")
const {Markup} = require("telegraf")
const {Branch} = require("../models/model")
const controller = require('../controller')

module.exports = {
    async mainMenu() {

        const branches = await Branch.findAll()
        const branchNames = []
        branches.forEach( branch => {
            branchNames.push(branch.name)
        } )
        const keyboard = Keyboard.reply([
            branchNames,
            ["üòä –ü–æ–±–æ–ª—Ç–∞–µ–º? (üì±–∫–æ–Ω—Ç–∞–∫—Ç—ã, –µ—Å–ª–∏ –∫—Ç–æ –Ω–µ –ø–æ–Ω—è–ª)"],
            ["üòá –û—Å—Ç–∞–≤–∏–º –æ—Ç–∑—ã–≤?"]
        ])

        return keyboard
    },

    chooseFillial() {
        return Keyboard.make([
            Key.url("–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", "https://t.me/halva_artcafe_shop"),
            Key.callback("–ü–æ–∑–≤–æ–Ω–∏—Ç—å", "phone")
        ]).inline()
    },

    createCategoryButtons(categories) {
        let keyboardArr = []
        categories.forEach( category => {
            keyboardArr.push( category.name )
        })
        const keyboard = Keyboard.make(keyboardArr , { columns: 2 })
        const btn = Keyboard.make([
            ["üöñ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"],
            ["üì• –ö–æ—Ä–∑–∏–Ω–∞","‚¨ÖÔ∏è –Ω–∞–∑–∞–¥"]
        ])


        return Keyboard.combine(keyboard, btn).reply()

    },

    createOnlyCategoryButtons(categories) {
        let keyboardArr = []
        categories.forEach( category => {
            keyboardArr.push( category.name )
        })
        let keyboard = Keyboard.make(keyboardArr, { columns: 2 })
        let backBtn = Keyboard.make([["‚¨ÖÔ∏è –Ω–∞–∑–∞–¥"]]) 
        return Keyboard.combine(keyboard, backBtn).reply() 
    },

    createDishesButtons(dishes) {
        let keyboardArr = []
        dishes.forEach( dish => {
            keyboardArr.push( dish.title )
        })
        
        const before = Keyboard.make([ ["üì• –ö–æ—Ä–∑–∏–Ω–∞"] ])
        const keyboard = Keyboard.make(keyboardArr , { columns: 2 })
        const after = Keyboard.make([ ["üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é","‚¨ÖÔ∏è –Ω–∞–∑–∞–¥"] ])


        return Keyboard.combine(before, keyboard, after).reply()
    },

    dishCount() {
        return Keyboard.reply([
            ["1", "2", "3"],
            ["4", "5", "6"],
            ["7", "8", "9"],
            ["üì• –ö–æ—Ä–∑–∏–Ω–∞", "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥"]
        ])
    },

    keyboardForCart(cartDishes) {
        let keyboardArr = []
        
        cartDishes.forEach( dishcart => {
            let dish = dishcart.dish
            keyboardArr.push( `‚ùå ${dish.title}` )
        })
        const keyboard = Keyboard.make(keyboardArr , { columns: 2 })
        const after = Keyboard.make([ ["‚¨ÖÔ∏è –Ω–∞–∑–∞–¥", "üîÑ –û—á–∏—Å—Ç–∏—Ç—å"], ["üöñ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"] ])
        return Keyboard.combine(keyboard, after).reply()
    },

   async sendLocation(userId) {
        let keyboardsArray = [
            [Markup.button.locationRequest('üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')],
            // addresses.reply_markup.keyboard,
            // ["‚¨ÖÔ∏è –Ω–∞–∑–∞–¥"]
        ]
        let addressesList = await controller.getCustomerAddresses(userId)
        
        if(addressesList.length > 0) {
            let addresses = await Keyboard.make( addressesList, {columns: 2} ).reply()
            addresses.reply_markup.keyboard.forEach( async keyboard => {
                await keyboardsArray.push(keyboard)
            }) 
        }
        
        await keyboardsArray.push(["‚¨ÖÔ∏è –Ω–∞–∑–∞–¥"])
        const keyboard = await Markup.keyboard(keyboardsArray,).resize()

        return keyboard
    },

    sendContacts(d) {
        const keyboard = Markup.keyboard([
            [Markup.button.contactRequest('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã')],
            ["‚¨ÖÔ∏è –Ω–∞–∑–∞–¥"]
        ]
        ).resize()
        return keyboard
    },

    paymentMethod() {
        return Keyboard.reply([
            ["üíµ –ù–∞–ª–∏—á–Ω—ã–µ", "üí≥ Payme"],
            ["‚¨ÖÔ∏è –Ω–∞–∑–∞–¥"]
        ])
    },
    confirm() {
        return Keyboard.reply([
            ["‚úÖ –ó–∞–∫–∞–∑—ã–≤–∞—é!"],
            ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]
        ])
    },

    confirmAdmin(orderId, user_id) {
        return Keyboard.make([
            Key.callback("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", `confirm:${orderId}_${user_id}`),
            Key.callback("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", `decline:${orderId}_${user_id}`)
        ]).inline()
    },

    pay() {
        return Keyboard.make( Key.callback("‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", `confirm:$}`) ).inline()
    },

    yesNo() {
        return Keyboard.reply([
            ["–ü—Ä–∏–±–æ—Ä—ã –∏ —Å–∞–ª—Ñ–µ—Ç–∫–∏ –Ω—É–∂–Ω—ã ‚úÖ"], 
            ["–ü—Ä–∏–±–æ—Ä—ã –∏ —Å–∞–ª—Ñ–µ—Ç–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã ‚ùå"],
            ["‚ùå –û—Ç–º–µ–Ω–∞"],
        ])
    },

    adminPanel() {
        return Keyboard.reply([
            ["–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"],
            ["–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"],
            ["–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"],
        ])
    },

    removeKeyboard() {
        return Keyboard.remove()
    },

    productOptions() {
        return Keyboard.reply([
            ["–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", "–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤"],
            ["–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É"],
            ["–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"],
            ["‚¨ÖÔ∏è –Ω–∞–∑–∞–¥"],
        ])
    },

    confirmDishCreating() {
        return Keyboard.reply([
            ["‚úÖ –î–∞"],
            ["‚ùå –ù–µ—Ç"],
        ])
    },

    back() {
        return Keyboard.reply([
            ["‚¨ÖÔ∏è –Ω–∞–∑–∞–¥"],
        ])
    },

    mailing() {
        return Keyboard.reply([
            ["–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞", "–û–±—ã—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"],
            ["‚¨ÖÔ∏è –Ω–∞–∑–∞–¥"],
        ])
    },
    
    productBtn(productText, productId, categoryId) {
        return Keyboard.make([
            Key.callback(`${productText}`, `product:${productId}:${categoryId}`)
        ]).inline()
    },

    cancel() {
        return Keyboard.reply([
            ["‚ùå –û—Ç–º–µ–Ω–∞"]
        ])
    }
}