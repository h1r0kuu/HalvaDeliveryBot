require("dotenv").config()
const {Telegraf,Scenes: {WizardScene, Stage}} = require("telegraf")
const replyKeyboard = require("../keyboards/replyKeyboard")
const {Customer, Address} = require("../models/model")
const utils = require("../utils")

const orderScene = new WizardScene("order", 
    async (ctx) => {
        try {
            await ctx.reply("üì± –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è!\n–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç. –õ–∏–±–æ\n–≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏\n–§–æ—Ä–º–∞—Ç +998*********", await replyKeyboard.sendContacts(ctx.message.from.id))
            return ctx.wizard.next()  
        } catch(e) {
            await utils.sendError(ctx, e)
        }
    },
    async (ctx) => {
        try {
            if(ctx.message.contact) {
                ctx.scene.state.phoneNumber = ctx.message.contact.phone_number
            } else {
                ctx.scene.state.phoneNumber = ctx.message.text
            }
            await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ª–æ–∫–∞—Ü–∏—é", await replyKeyboard.sendLocation(ctx.message.from.id))
            return ctx.wizard.next()  
        } catch(e) {
            await utils.sendError(ctx, e)
        }
    },

    async(ctx) => {
        try {
            let address = ''
            if(ctx.message.location) {
                const lat = ctx.message.location.latitude
                const long = ctx.message.location.longitude
                ctx.scene.state.latitude = lat
                ctx.scene.state.longitude = long
                address = await(await utils.getUserAddress(lat, long))[0]
            } else {
                address = ctx.message.text
            }
            ctx.scene.state.address = address
            const isExist = await Address.findOne({where: {customerUserId: ctx.message.from.id, address_name: address}})
            if(isExist === null) {
                await Address.create({
                    customerUserId: ctx.message.from.id,
                    address_name: address
                })
            }
            await ctx.wizard.selectStep(3);
            context = await replyKeyboard.back()
            context.parse_mode = "HTML"
            await ctx.reply("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É. –ù–∞–ø—Ä–∏–º–µ—Ä:  <b>–¥–æ–º ‚Ññ18, –í—Ç–æ—Ä–æ–π –ø–æ–¥—ä–µ–∑–¥ —Å–ª–µ–≤–∞, —Ç—Ä–µ—Ç–∏–π —ç—Ç–∞–∂, 15-—è –∫–≤–∞—Ä—Ç–∏—Ä–∞.</b>\n–õ–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ 'ok'", context)
        } catch(e) {
            await utils.sendError(ctx, e)
        }
    },
    async (ctx) => {
        try {
            const msg = ctx.message.text
            if(msg != "ok"){
                ctx.scene.state.addInfo = msg
            }
            await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", await replyKeyboard.paymentMethod())
            return ctx.wizard.next()
        } catch(e) {
            await utils.sendError(ctx, e)
        }
    
    },
    async (ctx) => {
        try {
            const paymentType = ctx.message.text
            ctx.scene.state.paymentType = paymentType
            await ctx.reply("–î–æ–±–∞–≤–∏—Ç—å —Å–∞–ª—Ñ–µ—Ç–∫–∏ –∏ —Å—Ç–æ–ª–æ–≤—ã–µ –ø—Ä–∏–±–æ—Ä—ã?", replyKeyboard.yesNo())
            return ctx.wizard.next()
        } catch(e) {
            await utils.sendError(ctx, e)
        }
    },

    async (ctx) => {
        try {
            const msg = ctx.message.text
            if(msg == "‚ùå –û—Ç–º–µ–Ω–∞") {
                await ctx.scene.leave()
                await ctx.reply("–û—Ç–ª–∏—á–Ω–æ! –û—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ? üòÉ", await replyKeyboard.mainMenu())
                return ctx.scene.enter("choosing_food_scene")
            } else {
                let servante = ''
                if(msg == "–ü—Ä–∏–±–æ—Ä—ã –∏ —Å–∞–ª—Ñ–µ—Ç–∫–∏ –Ω—É–∂–Ω—ã ‚úÖ") {
                    servante = "–î–∞"
                } else {
                    servante = "–ù–µ—Ç"
                }
                const userData = ctx.scene.state
                let cart = await utils.getCartInfo(ctx.message.from.id)
                let cartDishes = cart.cart_dishes
                const text = await utils.getCartText(cartDishes)
                const order = await utils.createOrder(ctx.message.from.id, ctx.scene.state)
                if(!userData.address) {//–¢–£–¢ –û–¢–ü–†–ê–í–õ–Ø–¢–°–Ø –î–û–õ–ñ–ù–û –í CHAT
                    await ctx.telegram.sendLocation(process.env.GROUP_ID, userData.latitude, userData.longitude)
                }
                userContext = await replyKeyboard.mainMenu()
                userContext.parse_mode = "HTML"
                await ctx.reply(`‚úÖ –í–∞—à –∑–∞–∫–∞–∑:
üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${userData.paymentType}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${userData.phoneNumber}
${ (userData.address) ? "üè† –ê–¥—Ä–µ—Å: " + userData.address : ""}

${text}

–ü—Ä–∏–±–æ—Ä—ã –∏ —Å–∞–ª—Ñ–µ—Ç–∫–∏ –Ω—É–∂–Ω—ã: <b>${servante}</b>

üìã –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
${ (userData.addInfo) ? userData.addInfo : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"}`, userContext)

                context = replyKeyboard.confirmAdmin(order.id, ctx.message.from.id)
                context.parse_mode = "HTML"
                await ctx.telegram.sendMessage(process.env.GROUP_ID, `–ó–∞–∫–∞–∑ ‚Ññ${order.id}:
üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${userData.paymentType}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${userData.phoneNumber}
${ (userData.address) ? "üè† –ê–¥—Ä–µ—Å: " + userData.address : ""}

${text}

–ü—Ä–∏–±–æ—Ä—ã –∏ —Å–∞–ª—Ñ–µ—Ç–∫–∏ –Ω—É–∂–Ω—ã: <b>${servante}</b>

üìã –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
${ (userData.addInfo) ? userData.addInfo : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"}`, context )
                
                await ctx.scene.leave()
                if(userData.paymentType != "üí≥ Payme") {
                    await ctx.reply(`–í–∞—à –∑–∞–∫–∞–∑ #${order.id} –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n–°–µ–π—á–∞—Å –í–∞–º –ø–æ–∑–≤–æ–Ω–∏—Ç –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä.`, await replyKeyboard.mainMenu())
                } else {
                    const providerToken = process.env.PAYME_TOKEN

                    let totalPrice = 0
                    cartDishes.forEach(dish => {
                        let price = dish.amount * dish.dish.price 
                        totalPrice += price
                    })
                    // await ctx.reply("–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: <b>Payme</b>\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: " + totalPrice + "—Å—É–º.\n–ß—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å\"", replyKeyboard.pay())
                    let invoice = {
                        chat_id: ctx.message.from.id, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                        provider_token: providerToken, // —Ç–æ–∫–µ–Ω –≤—ã–¥–∞–Ω–Ω—ã–π —á–µ—Ä–µ–∑ –±–æ—Ç @SberbankPaymentBot 
                        start_parameter: 'get_access', //–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≥–ª—É–±–∏–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫. –ï—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ –ø—É—Å—Ç—ã–º, –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ø–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∏–º–µ—Ç—å –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, –ø–æ–∑–≤–æ–ª—è—é—â—É—é –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∏–∑ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Å—á–µ—Ç. –ï—Å–ª–∏ –Ω–µ –ø—É—Å—Ç–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ø–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∏–º–µ—Ç—å –∫–Ω–æ–ø–∫—É URL —Å –≥–ª—É–±–æ–∫–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞ (–≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã) —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
                        title: `–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: Payme`, // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, 1-32 —Å–∏–º–≤–æ–ª–∞
                        description: `–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${totalPrice} —Å—É–º.\n–ß—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É`, // –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, 1-255 –∑–Ω–∞–∫–æ–≤
                        currency: 'UZS', // –¢—Ä–µ—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã ISO 4217
                        prices: [{ label: 'Invoice Title', amount: parseInt(totalPrice) * 100}], // –†–∞–∑–±–∏–≤–∫–∞ —Ü–µ–Ω, —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON 100 –∫–æ–ø–µ–µ–∫ * 100 = 100 —Ä—É–±–ª–µ–π
                        payload: { // –ü–æ–ª–µ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º, 1‚Äì128 –±–∞–π—Ç. –≠—Ç–æ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è —Å–≤–æ–∏—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
                          unique_id: `${ctx.message.from.id}_${order.id}`,
                          provider_token: providerToken
                        }
                    }
                    await ctx.replyWithInvoice(invoice)
                }
                return ctx.scene.enter("choosing_food_scene")    
            }
        
                
        } catch(e) {
            await utils.sendError(ctx, e)
        }
    }

)

orderScene.hears("‚¨ÖÔ∏è –Ω–∞–∑–∞–¥", async ctx => {
    ctx.wizard.cursor -= 2;
    if (ctx.wizard.cursor < 0 || ctx.wizard.cursor == 0) {
        await await ctx.scene.leave()
        await ctx.reply("‚Ñπ–û—Ç–ª–∏—á–Ω–æ! –û—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ? üòÉ", await replyKeyboard.mainMenu())
        // ctx.wizard.cursor = 0
        return ctx.scene.enter("choosing_food_scene")
    }
    ctx.wizard.selectStep(ctx.wizard.cursor)
    return ctx.wizard.steps[ctx.wizard.cursor](ctx)
})

module.exports = orderScene