require("dotenv").config()
const {Telegraf,Scenes: {WizardScene, Stage}} = require("telegraf")
const replyKeyboard = require("../keyboards/replyKeyboard")
const {Customer, Address} = require("../models/model")
const utils = require("../utils")

const orderScene = new WizardScene("order", 
    async (ctx) => {
        try {
            await ctx.reply("üì± –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è!\n–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç. –õ–∏–±–æ\n–≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏\n–§–æ—Ä–º–∞—Ç +998*********", await replyKeyboard.sendContacts(ctx.message.from.id))
            return ctx.wizard.next()  
        } catch(e) {
            await utils.sendError(ctx, e)
        }
    },
    async (ctx) => {
        try {
            if(ctx.message.contact) {
                ctx.scene.state.phoneNumber = ctx.message.contact.phone_number
            } else {
                if(ctx.message.text != "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥") {
                    ctx.scene.state.phoneNumber = ctx.message.text
                }
            }
            await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ª–æ–∫–∞—Ü–∏—é", await replyKeyboard.sendLocation(ctx.message.from.id))
            return ctx.wizard.next()  
        } catch(e) {
            await utils.sendError(ctx, e)
        }
    },

    async(ctx) => {
        try {
            let address = ''
            let lat = ''
            let long = ''
            if(ctx.message.location) {
                lat = ctx.message.location.latitude
                long = ctx.message.location.longitude
                ctx.scene.state.latitude = lat
                ctx.scene.state.longitude = long
                address = await(await utils.getUserAddress(lat, long))[0]
            } else {
                address = ctx.message.text
            }
            ctx.scene.state.address = address
            const isExist = await Address.findOne({where: {customerUserId: ctx.message.from.id, address_name: address}})
            if(isExist === null) {

                await Address.create({
                    customerUserId: ctx.message.from.id,
                    address_name: address,
                    address: (!isNaN(lat) && !isNaN(lat)) ? `${lat},${long}` : null

                })
            }
            await ctx.wizard.selectStep(3);
            context = await replyKeyboard.back()
            context.parse_mode = "HTML"
            await ctx.reply("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É. –ù–∞–ø—Ä–∏–º–µ—Ä:  <b>–¥–æ–º ‚Ññ18, –í—Ç–æ—Ä–æ–π –ø–æ–¥—ä–µ–∑–¥ —Å–ª–µ–≤–∞, —Ç—Ä–µ—Ç–∏–π —ç—Ç–∞–∂, 15-—è –∫–≤–∞—Ä—Ç–∏—Ä–∞.</b>\n–õ–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ 'ok'", context)
        } catch(e) {
            await utils.sendError(ctx, e)
        }
    },
    async (ctx) => {
        try {
            const msg = ctx.message.text
            if(msg != "ok"){
                ctx.scene.state.addInfo = msg
            }
            await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", await replyKeyboard.paymentMethod())
            return ctx.wizard.next()
        } catch(e) {
            await utils.sendError(ctx, e)
        }
    
    },
    async (ctx) => {
        try {
            const paymentType = ctx.message.text
            ctx.scene.state.paymentType = paymentType
            await ctx.reply("–î–æ–±–∞–≤–∏—Ç—å —Å–∞–ª—Ñ–µ—Ç–∫–∏ –∏ —Å—Ç–æ–ª–æ–≤—ã–µ –ø—Ä–∏–±–æ—Ä—ã?", replyKeyboard.yesNo())
            return ctx.wizard.next()
        } catch(e) {
            await utils.sendError(ctx, e)
        }
    },

    async (ctx) => {
        try {
            const msg = ctx.message.text
            if(msg == "‚ùå –û—Ç–º–µ–Ω–∞") {
                await ctx.scene.leave()
                await ctx.reply("–û—Ç–ª–∏—á–Ω–æ! –û—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ? üòÉ", await replyKeyboard.mainMenu())
                return ctx.scene.enter("choosing_food_scene")
            } else {
                let servante = ''
                if(msg == "–ü—Ä–∏–±–æ—Ä—ã –∏ —Å–∞–ª—Ñ–µ—Ç–∫–∏ –Ω—É–∂–Ω—ã ‚úÖ") {
                    servante = "–î–∞"
                } else {
                    servante = "–ù–µ—Ç"
                }
                const userData = ctx.scene.state
                let cart = await utils.getCartInfo(ctx.message.from.id)
                let cartDishes = cart.cart_dishes
                const text = await utils.getCartText(cartDishes)
                const order = await utils.createOrder(ctx.message.from.id, ctx.scene.state)
                if(!userData.address) {//–¢–£–¢ –û–¢–ü–†–ê–í–õ–Ø–¢–°–Ø –î–û–õ–ñ–ù–û –í CHAT
                    await ctx.telegram.sendLocation(process.env.GROUP_ID, userData.latitude, userData.longitude)
                }
                const addr = await Address.findOne({where: {customerUserId: ctx.message.from.id, address_name: userData.address}})
                if(addr.address) {
                    const data = addr.address.split(",")
                    if(data.length > 1) {
                        let lat = data[0]
                        let long = data[1]
                        if(!isNaN(parseInt(lat)) && !isNaN(parseInt(long))) {
                            await ctx.telegram.sendLocation(process.env.GROUP_ID, lat, long)
                        }   
                    }
                }
                userContext = await replyKeyboard.mainMenu()
                userContext.parse_mode = "HTML"
                await ctx.reply(`‚úÖ –í–∞—à –∑–∞–∫–∞–∑:
üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${userData.paymentType}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${ (userData.phoneNumber[0] != '+') ? '+' + userData.phoneNumber : userData.phoneNumber }
${ (userData.address) ? "üè† –ê–¥—Ä–µ—Å: " + userData.address : ""}

${text}

–ü—Ä–∏–±–æ—Ä—ã –∏ —Å–∞–ª—Ñ–µ—Ç–∫–∏ –Ω—É–∂–Ω—ã: <b>${servante}</b>

üìã –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
${ (userData.addInfo) ? userData.addInfo : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"}`, userContext)

                // context = replyKeyboard.confirmAdmin(order.id, ctx.message.from.id)
                context.parse_mode = "HTML"
                await ctx.telegram.sendMessage(process.env.GROUP_ID, `–ó–∞–∫–∞–∑ ‚Ññ${order.id}:
üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${userData.paymentType}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${ (userData.phoneNumber[0] != '+') ? '+' + userData.phoneNumber : userData.phoneNumber }
${ (userData.address) ? "üè† –ê–¥—Ä–µ—Å: " + userData.address : ""}

${text}

–ü—Ä–∏–±–æ—Ä—ã –∏ —Å–∞–ª—Ñ–µ—Ç–∫–∏ –Ω—É–∂–Ω—ã: <b>${servante}</b>

üìã –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
${ (userData.addInfo) ? userData.addInfo : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏—Ö –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`, context )
                await ctx.scene.leave()
                if(userData.paymentType != "üí≥ Payme") {
                    await ctx.reply(`–í–∞—à –∑–∞–∫–∞–∑ #${order.id} –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n–°–µ–π—á–∞—Å –í–∞–º –ø–æ–∑–≤–æ–Ω–∏—Ç –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä.`, await replyKeyboard.mainMenu())
                }
                return ctx.scene.enter("choosing_food_scene")    
            }
        
                
        } catch(e) {
            await utils.sendError(ctx, e)
        }
    }

)

orderScene.hears("‚¨ÖÔ∏è –Ω–∞–∑–∞–¥", async ctx => {
    ctx.wizard.cursor -= 2;
    if (ctx.wizard.cursor < 0 || ctx.wizard.cursor == 0) {
        await await ctx.scene.leave()
        await ctx.reply("‚Ñπ–û—Ç–ª–∏—á–Ω–æ! –û—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ? üòÉ", await replyKeyboard.mainMenu())
        // ctx.wizard.cursor = 0
        return ctx.scene.enter("choosing_food_scene")
    }
    ctx.wizard.selectStep(ctx.wizard.cursor)
    return ctx.wizard.steps[ctx.wizard.cursor](ctx)
})

module.exports = orderScene