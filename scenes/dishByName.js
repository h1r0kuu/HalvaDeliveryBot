const {Scenes: {WizardScene, Stage}} = require("telegraf")
const replyKeyboard = require("../keyboards/replyKeyboard")
const {Customer, Dish, CartDish} = require("../models/model")
const utils = require("../utils")

const dishName = new WizardScene("choose_dish_by_name", 
    async (ctx) => {
        return ctx.wizard.next()
    },
    
    async (ctx) => {
        try {
            const dish = (ctx.message.text == "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥" && typeof ctx.message.text == 'number' ) ? ctx.scene.state.searchQuery : ctx.message.text
            ctx.scene.state.searchQuery = dish
            const dishes = await utils.getDishesByName(dish)
            if(dishes.length > 0) {
                await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", replyKeyboard.createDishesButtons(dishes))
                return ctx.wizard.next()
            } else {
                await ctx.scene.leave()
                await ctx.reply("–ü—Ä–æ–¥—É–∫—Ç—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", await replyKeyboard.mainMenu())
                await ctx.scene.enter("choosing_food_scene")
            }
        } catch(e) {
            await utils.sendError(ctx, e)
        }
    },

    async (ctx) => {
        try {
            const dish = (ctx.message.text == "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥") ? ctx.scene.state.dishName : ctx.message.text
            const category = await utils.getDisheByCategory(dish)
            const dishInfo = await Dish.findOne({where: {title: dish, categoryId: category.id}})
            ctx.scene.state.category = category.id
            ctx.scene.state.dishId = dishInfo.id
            ctx.scene.state.dishName = dish
            await ctx.replyWithPhoto(dishInfo.file_id, {caption: `${dishInfo.title}\n\n${dishInfo.description}\n\n–¶–µ–Ω–∞: <b>${dishInfo.price} —Å—É–º</b>`, parse_mode: "HTML"})
            await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º", await replyKeyboard.productOptions())
            return ctx.wizard.next()
        } catch(e) {
            await utils.sendError(ctx, e)
        }
    },
    
    async (ctx) => {
        //ctx cursor 3
        const dish = ctx.scene.state
        const dishInfo = await Dish.findOne({where: {title: dish.dishName, categoryId: dish.dishId}})
        const option = ctx.message.text
        if(option == "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ") {
            await ctx.replyWithPhoto(dishInfo.file_id,{caption: `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ, —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ:`})
            await ctx.wizard.selectStep(4)
        } else if(option == "–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤") {
            await ctx.reply(`–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–æ—Å—Ç–∞–≤, —Ç–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤:\n<b>${dishInfo.description}</b>`, {parse_mode: "HTML"})
            await ctx.wizard.selectStep(5)
        } else if(option == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ") {
            await ctx.reply(`–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>${dishInfo.title}</b>`, {parse_mode: "HTML"})
            await ctx.wizard.selectStep(6)
        } else if(option == "–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É") {
            await ctx.reply(`–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É, —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>${dishInfo.price}</b>`, {parse_mode: "HTML"})
            await ctx.wizard.selectStep(7)
        } else if(option == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç") {
            await ctx.reply("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç?", await replyKeyboard.confirmDishCreating())
            await ctx.wizard.selectStep(8)
        } else {
            // await ctx.scene.leave()
            await ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", await replyKeyboard.productOptions())
        }
    },

    async (ctx) => {
        //Photo - 4
        const photo = ctx.message.photo
        if(photo) {
            try {
                const dish = ctx.scene.state
                const dishInfo = await Dish.findOne({where: {title: dish.dishName, categoryId: dish.dishId}})
                let fileId = ''
                if(photo.length > 1) {
                    fileId = photo[0].file_id
                } else {
                    fileId = photo.file_id
                }
                await ctx.scene.leave()
                dishInfo.file_id = fileId
                await dishInfo.save()
                await ctx.reply("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", await replyKeyboard.adminPanel())
            } catch(e) {
                await utils.sendError(ctx, e)
            }
        } else {
            await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ")
        }
    },
    async (ctx) => {
        //Descr - 5
        const description = ctx.message.text
        try {
            const dish = ctx.scene.state
            const dishInfo = await Dish.findOne({where: {title: dish.dishName, categoryId: dish.dishId}})
            if(description.length > 10) {
                await ctx.scene.leave()
                dishInfo.description = description
                await dishInfo.save()
                await ctx.reply("–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", await replyKeyboard.adminPanel())
            } else {
                await ctx.reply("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Å–æ—Å—Ç–∞–≤")
            }
        } catch(e) {
            await utils.sendError(ctx, e)
        }
    },
    async (ctx) => {
        //Title - 6
        const title = ctx.message.text
        try {
            const dish = ctx.scene.state
            const dishInfo = await Dish.findOne({where: {title: dish.dishName, categoryId: dish.category}})
            if(title.length > 4) {
                await ctx.scene.leave()
                dishInfo.title = title
                await dishInfo.save()
                await ctx.reply("–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", await replyKeyboard.adminPanel())
            } else {
                await ctx.reply("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
            }
        } catch(e) {
            await utils.sendError(ctx, e)
        }
    },
    async (ctx) => {
        //Price - 7
        const price = ctx.message.text.replace(" ", "")
        try {
            if(!isNaN(price)) {
                const dish = ctx.scene.state
                const dishInfo = await Dish.findOne({where: {title: dish.dishName, categoryId: dish.category}})
                let priceInt = parseInt(price)
                if(priceInt > 1000) {
                    await ctx.scene.leave()
                    dishInfo.price = priceInt
                    await dishInfo.save()
                    await ctx.reply("–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!", await replyKeyboard.adminPanel())
                } else {
                    await ctx.reply("–°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è —Å—É–º–º–∞")
                }
            } else {
                await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            }
        } catch(e) {
            await utils.sendError(ctx, e)
        }
    },

    async (ctx) => {
        //Deleting - 8
        const create = ctx.message.text
        try {
            if(create == "‚úÖ –î–∞") {
                const dish = ctx.scene.state
                const dishInfo = await Dish.findOne({where: {title: dish.dishName, categoryId: dish.category}})
                await dishInfo.destroy()
                
                await CartDish.destroy({where: {dishId: dishInfo.id}, truncate: true})
                
                await ctx.scene.leave()
                await ctx.reply("–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!", await replyKeyboard.adminPanel())
            } else if(create == "‚ùå –ù–µ—Ç") {
                await ctx.scene.leave()
                await ctx.reply("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", await replyKeyboard.adminPanel())
            } else {
                await ctx.reply("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞")
            }
        } catch(e) {
            await utils.sendError(ctx, e)
        }

    }
)

dishName.hears("‚¨ÖÔ∏è –Ω–∞–∑–∞–¥", async ctx => {
    ctx.wizard.cursor -= 2;
    if (ctx.wizard.cursor < 0) {
        ctx.reply("‚Ñπ–û—Ç–ª–∏—á–Ω–æ! –û—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ? üòÉ", await replyKeyboard.mainMenu())
        ctx.wizard.cursor = 0
    } else if(ctx.wizard.cursor == 0) {
        ctx.reply("‚Ñπ–û—Ç–ª–∏—á–Ω–æ! –û—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ? üòÉ", await replyKeyboard.mainMenu())
    }
    ctx.wizard.selectStep(ctx.wizard.cursor)
    return ctx.wizard.steps[ctx.wizard.cursor](ctx)
})

module.exports = dishName